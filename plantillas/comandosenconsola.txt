  // comandos en consola de windows y linux 
// pone encima de la clase donde este el initcomoponets. 

// despiues de colocarlo se llama a las clases con lo siente dentro del componente  
/* jTextArea1.setText(get_all_properties()); //clase a la que quieres llamar
*
*
*/        jTextArea1.setCaretPosition(0);


private String getLinuxProperty(String linuxResolucion) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    class JFileChooser {
    
}

    //HKEY ARGUMENTO
    private static final String REGQUERY_UTIL = "reg query ";
    private static final String REGSTR_TOKEN = "REG_SZ";
    private static final String REGDWORD_TOKEN = "REG_DWORD";

    //HKEY VARIABLES
    private static final String PRODUCT_NAME_CMD = REGQUERY_UTIL
            + "\"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ProductName";
    private static final String PRODUCT_VERSION_CMD = REGQUERY_UTIL
            + "\"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\"
            + "Update\\TargetingInfo\\Installed\\Client.OS.rs2.amd64\" /v Version";
    private static final String SYSTEM_FAMILY_CMD = REGQUERY_UTIL
            + "\"HKLM\\HARDWARE\\DESCRIPTION\\System\\BIOS\" /v SystemFamily";
    private static final String SYSTEM_MANUFACTURER_CMD = REGQUERY_UTIL
            + "\"HKLM\\HARDWARE\\DESCRIPTION\\System\\BIOS\" /v SystemManufacturer";
    private static final String SYSTEM_MODEL_CMD = REGQUERY_UTIL
            + "\"HKLM\\HARDWARE\\DESCRIPTION\\System\\BIOS\" /v SystemProductName";
    private static final String SYSTEM_NAME_CMD = REGQUERY_UTIL
            + "\"HKLM\\SYSTEM\\CurrentControlSet\\Control\\ComputerName\\"
            + "ActiveComputerName\" /v ComputerName";
    private static final String WINDOWS_DIRECTORY_CMD = REGQUERY_UTIL
            + "\"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v SystemRoot";
    private static final String CPU_SPEED_CMD = REGQUERY_UTIL
            + "\"HKLM\\HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0\""
            + " /v ~MHz";
    private static final String CPU_NAME_CMD = REGQUERY_UTIL
            + "\"HKLM\\HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0\""
            + " /v ProcessorNameString";
     //LINUX COMMANDS
    private static final String linuxSistema = "lsb_release -d | cut -b 14-";
    private static final String linuxNombreSistema = "hostname";
    private static final String linuxBiosVersion = "cat /sys/class/dmi/id/bios_version";
    private static final String linuxModelo = "cat /sys/class/dmi/id/product_name";
    private static final String linuxCPU = "lscpu | grep Nombre | awk '{print $4,$5,$6,$7,$8,$9}'";
    private static final String linuxNumCore = "grep 'cpu cores' /proc/cpuinfo | uniq | awk '{print $4}'";
    private static final String linuxNumThreads = "grep -c processor /proc/cpuinfo";
    private static final String linuxMemTotal = "free -h | grep Mem | awk '{print $2}'";
    private static final String linuxMemUsed = "free -h | grep Mem | awk '{print $3}'";
    private static final String linuxMemFree = "free -h | grep Mem | awk '{print $4}'";
    private static final String linuxModelBios = "cat /sys/class/dmi/id/bios_vendor";
    private static final String linuxResolucion = "xdpyinfo | awk '/dimensions/{print $2}'";
    
    String linuxUSERNAME = System.getProperty("user.name");
    String linuxUserGroups = "groups " + linuxUSERNAME;
    String[] groupsArray = linuxUserGroups.split(" ");

    int i = GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices()[0].getDisplayMode().getRefreshRate();

    //HELPFULL VARIABLES
    private final static String newline = "\n";
    private final static String tab = "\t";

    // sIMBOLO DE COPYRIGHT
    int copyrightSymbolCodePoint = 169;
    String scpyRight = Character.toString((char) copyrightSymbolCodePoint);

    // OBTENEMOS PANTALLA
    GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
    GraphicsDevice[] devices = env.getScreenDevices();

    // Obtenemos discos
    File[] unidades = File.listRoots();

    // Obtenemos nombre SO
        String sSistemaOperativo = System.getProperty("os.name");

